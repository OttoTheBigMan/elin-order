// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  password    String
  salt        String
  token       token[]
  activity    activity[]
  activityLog activityLog[]

  isAdmin     Boolean @default(false)
  totalPoints Int     @default(0)
  pic         String  @default("/default-pfp.png")

  likes    activity[] @relation("UserLikes")
  comments comment[]
  milestones milestone[]
}

model token {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model activity {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String
  points      Int

  suggestedBy   User   @relation(fields: [suggestedById], references: [id])
  suggestedById String

  isApproved   Boolean @default(false)
  approvedById String?
  activityLog activityLog[]

  likes    User[]    @relation("UserLikes")
  comments comment[]
}

model activityLog {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  activity   activity @relation(fields: [activityId], references: [id])
  activityId String
}

model comment {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  activity   activity @relation(fields: [activityId], references: [id])
  activityId String
  text       String
}

model milestone {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  description String
  badge     String
  points    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  isApproved   Boolean @default(false)
}